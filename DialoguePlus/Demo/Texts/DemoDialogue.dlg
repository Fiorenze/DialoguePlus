
# This is how you write comments
# Inline comments are not Supported
# So make sure commented lines start with '#'

label start

	"This is a text based interactive dialogue system with rollback support"
	
	"It is an alternative to node based systems which I think are not suitable for telling long/complicated stories"
	
	"With this system you can organize your files as you wish. You may create different files for each mission/character/day etc."
	
	"No extra scripts needed for this system to work"
	
	"You only need at least one file for dialogues and one optional file for definitions if you need them"
	
	"Example files have '.dlg' extension for clarity, yet, it should work with '.txt' or any TextAsset type Unity supports"
	
	"You can find example files in Demo/Texts folder."
	
	"You need to assign Dialogue and Definition files to DialogueManager"
	
	"If you specify a starting scene label in inspector, when you start the game, that dialogue will automatically start"
	
	"If you don't want that, simply keep it empty"
	
	"Heres the example layout of a dialogue file;"
	
	"A dialogue is defined by a label. And started by calling StartScene(sceneLabel) on DialogueManager"
	
	"Each line is a node except from if/else blocks and menu block."
	
	"On a typical node you may specify a name"
	
	Joe "For example this line is told by Joe, which is not defined in definitions file, so you directly see the name Joe"
	
	dev "And, this line is told by 'dev' which is a defined name in definitions file with custom color. So, you see the name Developer"
	
	"You can also define variables. Supported variable types are; string, integer and boolean"
	
	"For example, defined variable 'moneyAmount' is currently {moneyAmount}"
	
	"And you can use actions to modify a value, like, $ moneyAmount += 100 (in a separate line not in dialogue line)"
	
	"Supported operations are; addition (+=), substraction (-=), division (/=), multiplication (*=) and equals (=) which means you are giving it a completely new value"
	
	$ moneyAmount += 100
	
	"As you can see current amount of moneyAmount is '{moneyAmount}'"
	
	"Also you might want to show some part of the dialogue under certain conditions. For example 'if moneyAmount > 50'"
	
	if moneyAmount > 50
	
		"You see this line because moneyAmount is over 50"
		
		"Conditional sentences must be indented respective to the condition phrase"
		
	"Since this line is not indented respective to the condition phrase it is not included in if block"
	
	"You can also chain conditions with if/elif/else"
	
	if moneyAmount < 10
		
		"Your money is less than 10"
	
	elif moneyAmount == 50
	
		"Your money equals 50"		
		
	else 
	
		"Your money is over 50"
		
	"If any condition is correct, the rest won't be checked"
	
	"You may also want to ask questions, or give user some options to choose from. You can use menu: keyword for it"
	
	menu:
		"This is the first option with no actions"
		
		"This option will return to beginning"
			jump start
		
		"Get 150 money and lose 50"
			$ moneyAmount += 150
			$ moneyAmount -= 50
			
	"Finally, you may have repeated dialogues and don't want to write the same part everywhere"
	
	"For example, you may have a menu that you use as a shop. Then, you can make that part a separate label and call it with call keyword"
	
	"When you use call keyword, system creates a return point and when return keyword is called it returns to that point"
	
	call shop
	
	"Now you have returned to the last label from shop"
	
	dev "You have finished the tutorial. Have fun!"
	
label shop
	menu:
		"Buy a lemon for 10$" if hasLemon == False
			$moneyAmount -= 10
			$hasLemon = True
			"You bought a lemon, now you have {moneyAmount}"
			jump shop
		"Sell lemon for 8$" if hasLemon == True
			$moneyAmount += 8
			$hasLemon = False
			"You sold a lemon, now you have {moneyAmount}"
			jump shop
		"Done"
			return



